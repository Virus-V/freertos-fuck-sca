/*
 * FreeRTOS Kernel V11.1.0
 * Copyright (C) 2024 Fuck SCA.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
#include "FreeRTOSConfig.h"
#include "portasm.h"

    IMPORT xTaskIncrementTick
    IMPORT vTaskSwitchContext
    IMPORT vPortSetupTimerInterrupt

    EXPORT vTickISR
    EXPORT vPortYield
    EXPORT xPortStartScheduler

    RSEG CODE

/*
 * The RTOS tick ISR.
 *
 * If the cooperative scheduler is in use this simply increments the tick
 * count.
 *
 * If the preemptive scheduler is in use a context switch can also occur.
 */
vTickISR:
    portSAVE_CONTEXT

    call    #xTaskIncrementTick
    cmp.w   #0x0, R12
    jeq     SkipContextSwitch
    call    #vTaskSwitchContext
SkipContextSwitch:

    portRESTORE_CONTEXT
/*-----------------------------------------------------------*/


/*
 * Manual context switch called by the portYIELD() macro.
 */
vPortYield:

    /* Mimic an interrupt by pushing the SR. */
    push    SR

    /* Now the SR is stacked we can disable interrupts. */
    dint

    /* Save the context of the current task. */
    portSAVE_CONTEXT

    /* Switch to the highest priority task that is ready to run. */
    call    #vTaskSwitchContext

    /* Restore the context of the new task. */
    portRESTORE_CONTEXT
/*-----------------------------------------------------------*/


/*
 * Start off the scheduler by initialising the RTOS tick timer, then restoring
 * the context of the first task.
 */
xPortStartScheduler:

    /* Setup the hardware to generate the tick.  Interrupts are disabled
    when this function is called. */
    call    #vPortSetupTimerInterrupt

    /* Restore the context of the first task that is going to run. */
    portRESTORE_CONTEXT
/*-----------------------------------------------------------*/


    /* Install vTickISR as the timer A0 interrupt. */
    ASEG
    ORG 0xFFE0 + TIMERA0_VECTOR

    _vTickISR_: DC16 vTickISR


    END
