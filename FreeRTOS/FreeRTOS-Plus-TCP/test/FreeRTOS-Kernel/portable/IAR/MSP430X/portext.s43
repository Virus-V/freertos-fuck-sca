/*
 * FreeRTOS Kernel V11.1.0
 * Copyright (C) 2024 Fuck SCA.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
#include "msp430.h"
#include "FreeRTOSConfig.h"
#include "data_model.h"

    IMPORT xTaskIncrementTick
    IMPORT vTaskSwitchContext
    IMPORT vPortSetupTimerInterrupt
    IMPORT pxCurrentTCB
    IMPORT usCriticalNesting

    EXPORT vPortTickISR
    EXPORT vPortYield
    EXPORT xPortStartScheduler

portSAVE_CONTEXT macro

    /* Save the remaining registers. */
    pushm_x #12, r15
    mov.w   &usCriticalNesting, r14
    push_x r14
    mov_x   &pxCurrentTCB, r12
    mov_x   sp, 0( r12 )
    endm
/*-----------------------------------------------------------*/

portRESTORE_CONTEXT macro

    mov_x   &pxCurrentTCB, r12
    mov_x   @r12, sp
    pop_x   r15
    mov.w   r15, &usCriticalNesting
    popm_x  #12, r15
    nop
    pop.w   sr
    nop
    reta
    endm
/*-----------------------------------------------------------*/


/*
 * The RTOS tick ISR.
 *
 * If the cooperative scheduler is in use this simply increments the tick
 * count.
 *
 * If the preemptive scheduler is in use a context switch can also occur.
 */

    RSEG CODE
    EVEN

vPortTickISR:

    /* The sr is not saved in portSAVE_CONTEXT() because vPortYield() needs
    to save it manually before it gets modified (interrupts get disabled).
    Entering through this interrupt means the SR is already on the stack, but
    this keeps the stack frames identical. */
    push.w sr
    portSAVE_CONTEXT

    calla   #xTaskIncrementTick
    cmp.w   #0x0, R12
    jeq     SkipContextSwitch
    calla   #vTaskSwitchContext
SkipContextSwitch:
    portRESTORE_CONTEXT
/*-----------------------------------------------------------*/

/*
 * Manual context switch called by the portYIELD() macro.
 */
    EVEN

vPortYield:

    /* The sr needs saving before it is modified. */
    push.w  sr

    /* Now the SR is stacked interrupts can be disabled. */
    dint
    nop

    /* Save the context of the current task. */
    portSAVE_CONTEXT

    /* Select the next task to run. */
    calla   #vTaskSwitchContext

    /* Restore the context of the new task. */
    portRESTORE_CONTEXT
/*-----------------------------------------------------------*/


/*
 * Start off the scheduler by initialising the RTOS tick timer, then restoring
 * the context of the first task.
 */
    EVEN

xPortStartScheduler:

    /* Setup the hardware to generate the tick.  Interrupts are disabled
    when this function is called. */
    calla   #vPortSetupTimerInterrupt

    /* Restore the context of the first task that is going to run. */
    portRESTORE_CONTEXT
/*-----------------------------------------------------------*/

    END
